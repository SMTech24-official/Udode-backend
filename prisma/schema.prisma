// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  fullName         String
  email            String         @unique
  password         String?
  role             UserRoleEnum   @default(USER)
  status           UserStatus     @default(INACTIVE)
  location         String?
  phone            String?
  isVerified       Boolean        @default(false)
  image            String?
  otp              Int?
  otpExpiry        DateTime?
  fcmToken         String?
  onBoarding       Boolean        @default(false)
  stripeAccountUrl String?
  stripeCustomerId String?
  senderCustomerID String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relationships
  roomsSent        Room[]         @relation("SenderRelation")
  roomsReceived    Room[]         @relation("ReceiverRelation")
  roomParticipants RoomUser[]
   chatsSent     Chat[]        @relation("SenderRelation")
  chatsReceived Chat[]        @relation("ReceiverRelation")

  // Terminal
  terminals        Terminal[]
  reviews          Review[]
  terminalFeeds    TerminalFeed[]
  trips            Trip[]
  comments         Comment[]
  notifications    Notification[]
  categories       Category[]
  parcelsSent      Parcel[]        @relation("SenderPersonRelation")
  parcelsDelivered Parcel[]        @relation("DeliveryPersonRelation")
  // @@map("users")

  @@map("users")
}

model Room {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  type        RoomType  @default(ONE_TO_ONE) // Type: One-to-one or Group chat
  participants RoomUser[] // Relationship to participants (RoomUser table)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chat        Chat[]

  senderId    String?   @db.ObjectId
  receiverId  String?   @db.ObjectId
  sender      User?     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver    User?     @relation("ReceiverRelation", fields: [receiverId], references: [id])

  @@map("rooms")
}

model RoomUser {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  roomId   String @db.ObjectId
  userId   String @db.ObjectId
  room     Room   @relation(fields: [roomId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@map("room_users")
}



model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String?  @db.ObjectId // Nullable for group chats
  roomId     String   @db.ObjectId
  message    String
  images     String[]
  isRead     Boolean  @default(false)
  parcelId   String?  @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User?    @relation("ReceiverRelation", fields: [receiverId], references: [id]) // Optional for group chats
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("chats")
}


model Terminal {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  terminalName       String
  fareRange          String
  vendorName         String
  city               String
  location           String
  latitude           Float
  longitude          Float
  openingHours       String
  transportationType String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])

  reviews      Review[]
  TerminalFeed TerminalFeed[]
  Trip         Trip[]

  @@map("terminals")
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  terminalId String   @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  terminal Terminal @relation(fields: [terminalId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@map("reviews")
}

model TerminalFeed {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  terminalId    String        @db.ObjectId
  image         String
  description   String
  trafficStatus TrafficStatus @default(LOW)
  categoryId    String        @db.ObjectId
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  terminal Terminal  @relation(fields: [terminalId], references: [id])
  Category Category? @relation(fields: [categoryId], references: [id])

  @@map("terminal_feedbacks")
}

model Category {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  categoryName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user            User  @relation(fields: [userId], references: [id])

  TerminalFeed TerminalFeed[]

  @@map("categories")
}

model Trip {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  terminalId     String    @db.ObjectId
  tripDate       DateTime
  destination    String
  additionalNote String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  terminal Terminal  @relation(fields: [terminalId], references: [id])
  comments Comment[]

  @@map("trips")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  tripId    String    @db.ObjectId
  parentId  String?   @db.ObjectId
  comment   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  trip     Trip       @relation(fields: [tripId], references: [id])
  parent   Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[]  @relation("CommentReplies")

  @@index([tripId], name: "idx_tripId") // Index for faster trip-based queries
  @@index([userId], name: "idx_userId") // Index for user-specific queries
  @@index([parentId], name: "idx_parentId") // Index for nested comments
  @@map("comments")
}


model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  title     String
  body      String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

// model Chat {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   senderId   String   @db.ObjectId
//   roomId     String   @db.ObjectId
//   message    String
//   images     String[]
//   isRead     Boolean  @default(false)
//   parcelId   String?  @db.ObjectId
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
//   sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
//   room       Room     @relation(fields: [roomId], references: [id])

//   @@map("chats")
// }


// model Room {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String?  // Name for the group (optional for one-to-one)
//   type        RoomType @default(ONE_TO_ONE) // Enum to distinguish between one-to-one and group
//   users       User[]   @relation("RoomParticipants") // Many-to-many relationship for group members
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   senderId    String?  @db.ObjectId // Required for one-to-one messages
//   receiverId  String?  @db.ObjectId // Required for one-to-one messages
//   sender      User?    @relation("SenderRelation", fields: [senderId], references: [id])
//   receiver    User?    @relation("ReceiverRelation", fields: [receiverId], references: [id])
//   chat        Chat[]

//   @@map("rooms")
// }


model Parcel {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  userId               String        @db.ObjectId
  deliveryPersonId     String?       @db.ObjectId
  image                String
  description          String
  from                 String
  to                   String
  phone                String
  emergencyNote        String
  parcelTransportPrice Float
  endDateTime          DateTime
  parcelStatus         ParcelStatus  @default(PENDING)
  paymentStatus        PaymentStatus @default(PENDING)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  senderPerson   User      @relation("SenderPersonRelation", fields: [userId], references: [id])
  deliveryPerson User?     @relation("DeliveryPersonRelation", fields: [deliveryPersonId], references: [id])
  payment       Payment[]

  @@map("parcels")
}

model Payment {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  paymentId                String
  paymentAmount            Float
  parcelId                 String        @unique @db.ObjectId
  paymentDate              DateTime      @default(now())
  stripeCustomerIdProvider String
  stripeAccountIdReceiver  String
  status                   PaymentStatus @default(PENDING)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt

  parcel Parcel @relation(fields: [parcelId], references: [id])

  @@map("payments")
}

enum UserRoleEnum {
  USER
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum ParcelStatus {
  PENDING
  ACCEPTED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REQUIRES_CAPTURE
}

enum TrafficStatus {
  LOW
  MEDIUM
  HIGH
}

enum RoomType {
  ONE_TO_ONE
  GROUP
}
